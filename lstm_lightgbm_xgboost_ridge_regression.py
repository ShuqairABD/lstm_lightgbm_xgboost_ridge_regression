# -*- coding: utf-8 -*-
"""LSTM / LightGBM / XGboost / Ridge Regression

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tjxNW-yEtjRJFZ36P7txiwIdbyLe72vv

# **LSTM**
"""

from keras.models import Sequential
from keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler

# Подготовка данных для LSTM
scaler = MinMaxScaler()
data_scaled = scaler.fit_transform(data_5min[['Sensor Glucose']])

def create_lstm_features(data, look_back=6):
    X, y = [], []
    for i in range(len(data) - look_back):
        X.append(data[i:i + look_back, 0])
        y.append(data[i + look_back, 0])
    return np.array(X), np.array(y)

look_back = 6
X, y = create_lstm_features(data_scaled, look_back)
X = X.reshape((X.shape[0], X.shape[1], 1))  # Для LSTM вход должен быть трехмерным

# Разделение данных
train_size = int(len(X) * 0.8)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Создание модели LSTM
model = Sequential([
    LSTM(50, input_shape=(look_back, 1), return_sequences=False),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')
model.fit(X_train, y_train, epochs=20, batch_size=16, verbose=1)

# Прогнозирование
y_pred = model.predict(X_test)
y_pred_rescaled = scaler.inverse_transform(y_pred)

# Оценка модели
mae = mean_absolute_error(scaler.inverse_transform(y_test.reshape(-1, 1)), y_pred_rescaled)
print(f"Средняя абсолютная ошибка (MAE): {mae:.2f} ммоль/л")

# Прогнозирование
y_pred = model.predict(X_test)
y_pred_rescaled = scaler.inverse_transform(y_pred)
y_test_rescaled = scaler.inverse_transform(y_test.reshape(-1, 1))

# Оценка модели
mae = mean_absolute_error(y_test_rescaled, y_pred_rescaled)
print(f"Средняя абсолютная ошибка (MAE): {mae:.2f} ммоль/л")

# Визуализация
plt.figure(figsize=(14, 7))
plt.plot(range(len(y_test_rescaled)), y_test_rescaled, label='Реальные данные (ммоль/л)', color='blue')
plt.plot(range(len(y_pred_rescaled)), y_pred_rescaled, label='Прогноз (ммоль/л)', color='red', linestyle='--')
plt.xlabel("Итерации")
plt.ylabel("Глюкоза сенсора (ммоль/л)")
plt.title("Прогноз уровня глюкозы с использованием LSTM (на 30 минут вперед)")
plt.legend()
plt.grid()
plt.show()

# Прогноз на 30 минут вперед
print("Прогноз уровня глюкозы на следующие 30 минут:")
for i, pred in enumerate(y_pred_rescaled[-6:]):
    print(f"{i * 5 + 5} минут: {pred[0]:.2f} ммоль/л")

"""# **LightGBM**"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from lightgbm import LGBMRegressor
import matplotlib.pyplot as plt

# Подготовка данных
def create_features(data, lags=6):
    """
    Создает лаговые признаки и временные признаки для временного ряда.
    """
    df = data.copy()
    for lag in range(1, lags + 1):
        df[f'lag_{lag}'] = df['Sensor Glucose'].shift(lag)
    df['hour'] = df['Datetime'].dt.hour
    df['minute'] = df['Datetime'].dt.minute
    df = df.dropna()
    return df

# Создать признаки
data_with_features = create_features(data_5min, lags=6)

# Разделение на обучающую и тестовую выборки
X = data_with_features.drop(columns=['Sensor Glucose', 'Datetime'])
y = data_with_features['Sensor Glucose']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=False)

# Обучение LightGBM
model = LGBMRegressor(n_estimators=100, learning_rate=0.1, max_depth=5)
model.fit(X_train, y_train)

# Прогнозирование
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
print(f"Средняя абсолютная ошибка (MAE): {mae:.2f} ммоль/л")

#  Визуализация
plt.figure(figsize=(14, 7))
plt.plot(range(len(y_test)), y_test, label='Реальные данные (ммоль/л)', color='blue')
plt.plot(range(len(y_pred)), y_pred, label='Прогноз (ммоль/л)', color='red', linestyle='--')
plt.xlabel("Итерации")
plt.ylabel("Глюкоза сенсора (ммоль/л)")
plt.title("Прогноз уровня глюкозы с использованием LightGBM (на 30 минут вперед)")
plt.legend()
plt.grid()
plt.show()

# Шаг 4: Прогноз на 30 минут вперед
# последние данные из X_test
last_values = X_test.iloc[-1:].copy()
future_preds = []
for i in range(6):  # Прогноз на (30 минут)
    pred = model.predict(last_values)[0]
    future_preds.append(pred)

    # Обновить лаги для следующего прогноза
    for lag in range(6, 1, -1):
        last_values[f'lag_{lag}'] = last_values[f'lag_{lag - 1}']
    last_values['lag_1'] = pred

# Вывод
print("\nПрогноз уровня глюкозы на следующие 30 минут:")
for i, pred in enumerate(future_preds):
    print(f"{(i + 1) * 5} минут: {pred:.2f} ммоль/л")

"""# **XGboost**"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
import xgboost as xgb
import matplotlib.pyplot as plt

# Подготовка данных
def create_features(data, lags=6):
    """
    Создает лаговые признаки и временные признаки для временного ряда.
    """
    df = data.copy()
    for lag in range(1, lags + 1):
        df[f'lag_{lag}'] = df['Sensor Glucose'].shift(lag)
    df['hour'] = df['Datetime'].dt.hour
    df['minute'] = df['Datetime'].dt.minute
    df = df.dropna()  # Убираем строки с NaN после создания лагов
    return df

# Создать признаки
data_with_features = create_features(data_5min, lags=6)

# train / test
X = data_with_features.drop(columns=['Sensor Glucose', 'Datetime'])
y = data_with_features['Sensor Glucose']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=False)

# Обучение модели XGBoost
model = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100, learning_rate=0.1, max_depth=5)
model.fit(X_train, y_train)

# Прогнозирование
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
print(f"Средняя абсолютная ошибка (MAE): {mae:.2f} ммоль/л")

# Генерация рекомендаций
test_data = data_with_features.iloc[-len(X_test):].copy()
test_data['Predicted Glucose'] = y_pred

recommendations = generate_recommendations(test_data['Predicted Glucose'], test_data)

# Визуализация
plt.figure(figsize=(14, 7))
plt.plot(data_with_features['Datetime'], data_with_features['Sensor Glucose'], label='Глюкоза (ммоль/л)', color='blue')
plt.plot(test_data['Datetime'], y_pred, label='Прогноз (XGBoost)', color='red', linestyle='--')

plt.axhline(y=4, color='black', linestyle='--', label='Нижняя граница (4 ммоль/л)')
plt.axhline(y=10, color='black', linestyle='--', label='Верхняя граница (10 ммоль/л)')
plt.fill_between(data_with_features['Datetime'], 4, 10, color='green', alpha=0.1, label='Целевой диапазон (4-10 ммоль/л)')

plt.xlabel("Время")
plt.ylabel("Глюкоза сенсора (ммоль/л)")
plt.title("Прогноз уровня глюкозы с использованием XGBoost")
plt.legend()
plt.grid()
plt.show()

# Вывод рекомендаций
print("\nРекомендации:")
for rec in recommendations:
    print(rec)

"""# **Ridge Regression**"""

import pandas as pd
import numpy as np
from sklearn.linear_model import Ridge
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt

# Подготовка данных
def create_features(data, lags=6):
    """
    Создает лаговые признаки и временные признаки для временного ряда.
    """
    df = data.copy()
    for lag in range(1, lags + 1):
        df[f'lag_{lag}'] = df['Sensor Glucose'].shift(lag)
    df['hour'] = df['Datetime'].dt.hour
    df['minute'] = df['Datetime'].dt.minute
    df = df.dropna()
    return df

# Создать признаки
data_with_features = create_features(data_5min, lags=6)

# Train / Test
X = data_with_features.drop(columns=['Sensor Glucose', 'Datetime'])
y = data_with_features['Sensor Glucose']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=False)

# Обучение Ridge Regression
model = Ridge(alpha=1.0)  # Alpha - коэффициент регуляризации
model.fit(X_train, y_train)

# Прогнозирование
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
print(f"Средняя абсолютная ошибка (MAE): {mae:.2f} ммоль/л")

# Визуализация
plt.figure(figsize=(14, 7))
plt.plot(range(len(y_test)), y_test, label='Реальные данные (ммоль/л)', color='blue')
plt.plot(range(len(y_pred)), y_pred, label='Прогноз (ммоль/л)', color='red', linestyle='--')
plt.xlabel("Итерации")
plt.ylabel("Глюкоза сенсора (ммоль/л)")
plt.title("Прогноз уровня глюкозы с использованием Ridge Regression (на 30 минут вперед)")
plt.legend()
plt.grid()
plt.show()

# Шаг 4: Прогноз на 30 минут вперед
# последние данные из X_test
last_values = X_test.iloc[-1:].copy()
future_preds = []
for i in range(6):  # Прогноз на 6 точек вперед (30 минут)
    pred = model.predict(last_values)[0]
    future_preds.append(pred)

    # Обновить лаги для следующего прогноза
    for lag in range(6, 1, -1):
        last_values[f'lag_{lag}'] = last_values[f'lag_{lag - 1}']
    last_values['lag_1'] = pred

# Генерация рекомендаций по правилам игры
def generate_recommendations(predictions, target=7, insulin_sensitivity=0.3):
    recommendations = []
    for i, predicted in enumerate(predictions):
        time = f"{(i + 1) * 5} минут"
        if predicted > 10:  # Гипергликемия
            insulin_dose = (predicted - target) * insulin_sensitivity
            recommendations.append(
                f"⚠️ {time}: Прогноз: {predicted:.2f} ммоль/л. Риск гипергликемии!\n"
                f"Рекомендуется ввести {insulin_dose:.2f} ЕД инсулина для достижения уровня {target} ммоль/л.\n"
                f"Проверьте дозу инсулина с врачом."
            )
        elif predicted < 4:  # Гипогликемия
            carb_amount = (target - predicted) * 10  # формула для углеводов
            recommendations.append(
                f"⚠️ {time}: Прогноз: {predicted:.2f} ммоль/л. Риск гипогликемии!\n"
                f"Рекомендуется принять {carb_amount:.2f} г углеводов для достижения уровня {target} ммоль/л."
            )
        else:
            recommendations.append(
                f"✅ {time}: Прогноз: {predicted:.2f} ммоль/л. Уровень в пределах нормы."
            )
    return recommendations

recommendations = generate_recommendations(future_preds)

# Вывод рекомендаций
print("\nПрогноз уровня глюкозы на следующие 30 минут:")
for rec in recommendations:
    print(rec)

"""**Игровое поле**

**Игровая площадка 1**: Целевой диапазон уровня глюкозы от 4 до 10 ммоль/л.
Если уровень глюкозы находится в этом диапазоне, ИИ (врач) не предпринимает действий — игра идет успешно для врача.

**Игровая площадка 2**: Уровень глюкозы выше 10 ммоль/л (гипергликемия) или ниже 4 ммоль/л (гипогликемия).
Если глюкоза выходит за пределы целевого диапазона, ИИ должен "отбить мяч", чтобы вернуть уровень в целевой диапазон.

Инструменты врача (ИИ) **Инсулин (болюс):**

Используется, если прогноз показывает уровень глюкозы выше 10 ммоль/л.
Рассчитывается доза инсулина, необходимая для достижения целевого уровня 7 ммоль/л.

**Формула:**
Доза инсулина (ЕД)
=
(
Прогноз
−
Цель
)
×
Чувствительность инсулина
Доза инсулина (ЕД)=(Прогноз−Цель)×Чувствительность инсулина
где чувствительность инсулина = 0.3 ЕД/ммоль/л.

**Углеводы:**

Используются, если прогноз показывает уровень глюкозы ниже 4 ммоль/л.
Рассчитывается количество углеводов, необходимое для достижения целевого уровня 7 ммоль/л.
Формула:
Количество углеводов (г)
=
(
Цель
−
Прогноз
)
×
10
Количество углеводов (г)=(Цель−Прогноз)×10
где 10 г углеводов ≈ повышение глюкозы на 1 ммоль/л.

**Ничего не делать:**


Если уровень глюкозы находится в пределах 4–10 ммоль/л, врач не предпринимает действий.
Логика принятия решений
Гипергликемия (>10 ммоль/л):

Рассчитывается доза болюсного инсулина для снижения уровня глюкозы до 7 ммоль/л.

**Пример:**

⚠️ 5 минут: Прогноз: 10.85 ммоль/л. Риск гипергликемии!
Рекомендуется ввести 1.16 ЕД инсулина для достижения уровня 7 ммоль/л.

Гипогликемия (<4 ммоль/л):

Рассчитывается количество углеводов для повышения уровня глюкозы до 7 ммоль/л.

**Пример:**

⚠️ 10 минут: Прогноз: 3.20 ммоль/л. Риск гипогликемии!
Рекомендуется принять 38.00 г углеводов для достижения уровня 7 ммоль/л.
Целевой диапазон (4–10 ммоль/л):

Уровень глюкозы в пределах нормы, врач не предпринимает действий.

**Пример:**

✅ 15 минут: Прогноз: 7.80 ммоль/л. Уровень в пределах нормы.
Цель игры
Для ИИ (врача):

Уровень глюкозы должен оставаться в пределах 4–10 ммоль/л не менее 70% времени.

**Для пациента:**

Пациент "защищает" высокий или низкий уровень глюкозы, но врач использует инсулин или углеводы, чтобы вернуть уровень глюкозы в целевой диапазон.

Итог

Правила игры обеспечивают:

- Реакцию ИИ на выход за пределы целевого диапазона.

- Автоматический расчет дозы инсулина или количества углеводов для стабилизации уровня глюкозы.

- Мониторинг уровня глюкозы в течение времени с прогнозом на 30 минут вперед.
"""